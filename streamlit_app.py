"""
Streamlit webov√© rozhran√≠ pro Research Agent
Implementace interaktivn√≠ho u≈æivatelsk√©ho rozhran√≠ s human-in-the-loop funkcionalitou

Author: Senior Python/MLOps Agent
"""

import streamlit as st
import asyncio
import json
import time
from typing import Dict, Any, Optional
import logging
from datetime import datetime

# Import agenta a souvisej√≠c√≠ch komponent
from src.core.langgraph_agent import ResearchAgentGraph, ResearchAgentState
from src.core.config_langgraph import load_config, validate_config
from src.core.enhanced_tools import get_enhanced_tools

# Konfigurace loggingu
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Konfigurace Streamlit str√°nky
st.set_page_config(
    page_title="Deep Research Tool - Enhanced",
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Glob√°ln√≠ session state pro udr≈æen√≠ stavu agenta
if "agent" not in st.session_state:
    st.session_state.agent = None
if "research_results" not in st.session_state:
    st.session_state.research_results = None
if "current_state" not in st.session_state:
    st.session_state.current_state = None
if "approval_pending" not in st.session_state:
    st.session_state.approval_pending = False
if "sources_found" not in st.session_state:
    st.session_state.sources_found = []


def initialize_agent(config: Dict[str, Any]) -> ResearchAgentGraph:
    """
    Inicializuje research agenta s danou konfigurac√≠

    Args:
        config: Konfigurace pro agenta

    Returns:
        Inicializovan√Ω Research Agent
    """
    try:
        agent = ResearchAgentGraph(config)
        return agent
    except Exception as e:
        st.error(f"Chyba p≈ôi inicializaci agenta: {e}")
        return None


def render_sidebar() -> Dict[str, Any]:
    """
    Vykresl√≠ postrann√≠ panel s nastaven√≠m

    Returns:
        Slovn√≠k s konfigurac√≠
    """
    st.sidebar.title("‚öôÔ∏è Nastaven√≠")

    # Model selection
    model_option = st.sidebar.selectbox(
        "Vyberte LLM model",
        ["gpt-4o-mini", "gpt-4o", "gpt-3.5-turbo"],
        index=0
    )

    # Research depth
    research_depth = st.sidebar.slider(
        "Hloubka v√Ωzkumu",
        min_value=1,
        max_value=5,
        value=3,
        help="Poƒçet krok≈Ø v pl√°nu v√Ωzkumu"
    )

    # Validation threshold
    validation_threshold = st.sidebar.slider(
        "Pr√°h validace zdroj≈Ø",
        min_value=0.1,
        max_value=1.0,
        value=0.7,
        step=0.1,
        help="Minim√°ln√≠ sk√≥re pro p≈ôijet√≠ zdroj≈Ø"
    )

    # Advanced options
    with st.sidebar.expander("üîß Pokroƒçil√© nastaven√≠"):
        max_docs = st.slider("Max dokument≈Ø", 5, 50, 20)
        temperature = st.slider("Teplota modelu", 0.0, 1.0, 0.1, step=0.1)
        enable_enhanced_tools = st.checkbox("Povolit roz≈°√≠≈ôen√© n√°stroje", value=True)

    # Sestaven√≠ konfigurace
    config = {
        "llm": {
            "model": model_option,
            "temperature": temperature,
            "synthesis_model": "gpt-4o" if model_option != "gpt-4o" else "gpt-4o",
            "synthesis_temperature": 0.2
        },
        "memory_store": {
            "type": "chroma",
            "collection_name": "research_collection",
            "persist_directory": "./chroma_db"
        },
        "rag": {
            "chunking": {
                "chunk_size": 1000,
                "chunk_overlap": 100
            }
        },
        "synthesis": {
            "max_docs": max_docs
        },
        "validation": {
            "threshold": validation_threshold,
            "max_retries": 2
        },
        "research": {
            "depth": research_depth,
            "enhanced_tools": enable_enhanced_tools
        }
    }

    return config


def render_main_interface():
    """Vykresl√≠ hlavn√≠ rozhran√≠ aplikace"""

    st.title("üî¨ Deep Research Tool - Enhanced")
    st.markdown("*Pokroƒçil√Ω v√Ωzkumn√Ω agent s human-in-the-loop funkcionalitou*")

    # Vstupn√≠ oblast pro dotaz
    query = st.text_area(
        "üìù Zadejte v√°≈° v√Ωzkumn√Ω dotaz:",
        height=100,
        placeholder="Napi≈°te detailn√≠ v√Ωzkumn√Ω dotaz... Nap≈ô√≠klad: 'Jak√© jsou nejnovƒõj≈°√≠ trendy v oblasti umƒõl√© inteligence v medic√≠nƒõ?'"
    )

    # Tlaƒç√≠tka pro ovl√°d√°n√≠
    col1, col2, col3 = st.columns([2, 1, 1])

    with col1:
        run_research = st.button("üöÄ Spustit v√Ωzkum", type="primary", disabled=not query.strip())

    with col2:
        if st.button("üóëÔ∏è Vymazat"):
            st.session_state.research_results = None
            st.session_state.current_state = None
            st.session_state.sources_found = []
            st.rerun()

    with col3:
        if st.button("üìä Statistiky"):
            show_statistics()

    return query, run_research


def show_real_time_status(state: Dict[str, Any]):
    """
    Zobraz√≠ aktu√°ln√≠ stav agenta v re√°ln√©m ƒçase

    Args:
        state: Aktu√°ln√≠ stav agenta
    """
    with st.container():
        st.subheader("üîÑ Aktu√°ln√≠ stav")

        current_step = state.get("current_step", "nezn√°m√Ω")

        # Progress bar based on step
        step_mapping = {
            "initialized": 0,
            "plan_completed": 20,
            "retrieve_completed": 40,
            "validate_sources_completed": 60,
            "validate_completed": 80,
            "synthesis_completed": 100
        }

        progress = step_mapping.get(current_step, 0)
        st.progress(progress / 100)

        # Status info
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("Aktu√°ln√≠ krok", current_step)

        with col2:
            docs_count = len(state.get("retrieved_docs", []))
            st.metric("Nalezen√© dokumenty", docs_count)

        with col3:
            errors_count = len(state.get("errors", []))
            st.metric("Chyby", errors_count, delta_color="inverse")

        # Plan display
        if state.get("plan"):
            with st.expander("üìã Pl√°n v√Ωzkumu"):
                for i, step in enumerate(state["plan"], 1):
                    st.write(f"{i}. {step}")

        # Validation scores
        if state.get("validation_scores"):
            with st.expander("‚úÖ Validaƒçn√≠ sk√≥re"):
                scores = state["validation_scores"]
                col1, col2, col3 = st.columns(3)

                with col1:
                    st.metric("Relevance", f"{scores.get('relevance', 0):.2f}")
                with col2:
                    st.metric("Pokryt√≠", f"{scores.get('coverage', 0):.2f}")
                with col3:
                    st.metric("Kvalita", f"{scores.get('quality', 0):.2f}")


def handle_human_approval(pending_action: Dict[str, Any]) -> Optional[str]:
    """
    Zpracuje po≈æadavek na lidsk√© schv√°len√≠

    Args:
        pending_action: Akce ƒçekaj√≠c√≠ na schv√°len√≠

    Returns:
        Rozhodnut√≠ u≈æivatele nebo None
    """
    if not st.session_state.approval_pending:
        return None

    with st.container():
        st.warning("‚ö†Ô∏è Po≈æadavek na schv√°len√≠")

        action_type = pending_action.get("type", "nezn√°m√° akce")

        if action_type == "low_quality_sources":
            avg_score = pending_action.get("avg_score", 0)
            threshold = pending_action.get("threshold", 0.7)

            st.write(f"""
            **Nalezen√© zdroje maj√≠ n√≠zk√© sk√≥re kvality:**
            - Pr≈Ømƒõrn√© sk√≥re: {avg_score:.2f}
            - Po≈æadovan√Ω pr√°h: {threshold:.2f}
            
            Chcete pokraƒçovat i p≈ôes n√≠zkou kvalitu zdroj≈Ø?
            """)

        col1, col2 = st.columns(2)

        with col1:
            if st.button("‚úÖ Schv√°lit", type="primary"):
                st.session_state.approval_pending = False
                return "approved"

        with col2:
            if st.button("‚ùå Zam√≠tnout"):
                st.session_state.approval_pending = False
                return "rejected"

    return None


def display_results(results: Dict[str, Any]):
    """
    Zobraz√≠ fin√°ln√≠ v√Ωsledky v√Ωzkumu

    Args:
        results: V√Ωsledky v√Ωzkumu
    """
    st.subheader("üìã V√Ωsledky v√Ωzkumu")

    # Metadata
    with st.expander("‚ÑπÔ∏è Metadata"):
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Doba zpracov√°n√≠", f"{results.get('processing_time', 0):.2f}s")
        with col2:
            st.metric("Celkem dokument≈Ø", results.get('metadata', {}).get('total_documents', 0))
        with col3:
            st.metric("Pou≈æit√© n√°stroje", results.get('metadata', {}).get('tools_used', 0))

    # Synt√©za
    if results.get("synthesis"):
        st.markdown("### üìÑ Fin√°ln√≠ synt√©za")
        st.markdown(results["synthesis"])

    # Chyby
    if results.get("errors"):
        with st.expander("‚ö†Ô∏è Chyby bƒõhem zpracov√°n√≠"):
            for error in results["errors"]:
                st.error(error)


def display_sources_sidebar(sources: list):
    """
    Zobraz√≠ seznam zdroj≈Ø v postrann√≠m panelu

    Args:
        sources: Seznam nalezen√Ωch zdroj≈Ø
    """
    if sources:
        st.sidebar.markdown("### üìö Pou≈æit√© zdroje")

        for i, source in enumerate(sources, 1):
            source_url = source.get("source", "")
            source_title = source.get("metadata", {}).get("title", f"Zdroj {i}")

            if source_url.startswith("http"):
                st.sidebar.markdown(f"[{i}. {source_title}]({source_url})")
            else:
                st.sidebar.markdown(f"{i}. {source_title}")


def show_statistics():
    """Zobraz√≠ statistiky pou≈æit√≠"""
    with st.container():
        st.subheader("üìä Statistiky")

        # Placeholder pro statistiky
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("Celkem dotaz≈Ø", "N/A")
        with col2:
            st.metric("Pr≈Ømƒõrn√Ω ƒças", "N/A")
        with col3:
            st.metric("√öspƒõ≈°nost", "N/A")
        with col4:
            st.metric("Zdroj≈Ø celkem", "N/A")


async def run_research_async(agent: ResearchAgentGraph, query: str) -> Dict[str, Any]:
    """
    Asynchronnƒõ spust√≠ v√Ωzkum

    Args:
        agent: Research agent
        query: Dotaz

    Returns:
        V√Ωsledky v√Ωzkumu
    """
    return await agent.research(query)


def main():
    """Hlavn√≠ funkce aplikace"""

    # Naƒçten√≠ konfigurace z sidebar
    config = render_sidebar()

    # Inicializace agenta
    if st.session_state.agent is None:
        st.session_state.agent = initialize_agent(config)

    # Hlavn√≠ rozhran√≠
    query, run_research = render_main_interface()

    # Spu≈°tƒõn√≠ v√Ωzkumu
    if run_research and query.strip() and st.session_state.agent:

        # Status container pro real-time updates
        status_container = st.container()

        with st.spinner("üîç Prob√≠h√° v√Ωzkum..."):
            try:
                # Spu≈°tƒõn√≠ asynchronn√≠ho v√Ωzkumu
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)

                results = loop.run_until_complete(
                    run_research_async(st.session_state.agent, query)
                )

                st.session_state.research_results = results
                st.session_state.sources_found = results.get("retrieved_docs", [])

                # Zobrazen√≠ √∫spƒõchu
                st.success("‚úÖ V√Ωzkum dokonƒçen!")

            except Exception as e:
                st.error(f"‚ùå Chyba bƒõhem v√Ωzkumu: {e}")
                logger.error(f"Research error: {e}")

            finally:
                loop.close()

    # Zobrazen√≠ v√Ωsledk≈Ø
    if st.session_state.research_results:
        display_results(st.session_state.research_results)

    # Zobrazen√≠ zdroj≈Ø v sidebar
    if st.session_state.sources_found:
        display_sources_sidebar(st.session_state.sources_found)

    # Zpracov√°n√≠ human approval (pokud je pot≈ôeba)
    if st.session_state.approval_pending and st.session_state.current_state:
        pending_action = st.session_state.current_state.get("pending_action")
        if pending_action:
            decision = handle_human_approval(pending_action)
            if decision:
                st.rerun()


if __name__ == "__main__":
    main()
