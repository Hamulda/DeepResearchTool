name: Research Agent CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  LANGFUSE_HOST: "http://localhost:3000"

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov ruff mypy

    - name: Lint with ruff
      run: ruff check src/ tests/

    - name: Type check with mypy
      run: mypy src/ --ignore-missing-imports

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  integration-tests:
    runs-on: ubuntu-latest
    needs: lint-and-test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: langfuse
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start Langfuse
      run: |
        docker run -d \
          --name langfuse \
          -p 3000:3000 \
          -e DATABASE_URL=postgresql://postgres:postgres@localhost:5432/langfuse \
          -e NEXTAUTH_SECRET=mysecret \
          -e SALT=mysalt \
          -e NEXTAUTH_URL=http://localhost:3000 \
          langfuse/langfuse:latest
        
        # Wait for Langfuse to be ready
        timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'

    - name: Run integration tests
      env:
        CI: true
        LANGFUSE_SECRET_KEY: ${{ secrets.LANGFUSE_SECRET_KEY }}
        LANGFUSE_PUBLIC_KEY: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
        LANGFUSE_HOST: ${{ env.LANGFUSE_HOST }}
        LANGFUSE_ENABLED: true
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        pytest tests/test_integration_complete.py -v
        pytest tests/test_langgraph_integration.py -v

  evaluation-pipeline:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: langfuse
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      chroma:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start Langfuse
      run: |
        docker run -d \
          --name langfuse \
          -p 3000:3000 \
          -e DATABASE_URL=postgresql://postgres:postgres@localhost:5432/langfuse \
          -e NEXTAUTH_SECRET=mysecret \
          -e SALT=mysalt \
          -e NEXTAUTH_URL=http://localhost:3000 \
          langfuse/langfuse:latest
        
        timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'

    - name: Run Golden Dataset Evaluation
      env:
        CI: true
        LANGFUSE_SECRET_KEY: ${{ secrets.LANGFUSE_SECRET_KEY }}
        LANGFUSE_PUBLIC_KEY: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
        LANGFUSE_HOST: ${{ env.LANGFUSE_HOST }}
        LANGFUSE_ENABLED: true
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        CHROMA_HOST: http://localhost:8000
      run: |
        # Spu≈°tƒõn√≠ kritick√©ho evaluaƒçn√≠ho testu
        pytest tests/test_evaluation_pipeline.py::TestCIIntegration::test_ci_evaluation_with_thresholds -v -s
        
        # Pokud test sel≈æe, build sel≈æe
        if [ $? -ne 0 ]; then
          echo "‚ùå REGRESSION DETECTED - Evaluation pipeline failed!"
          echo "Metrics are below acceptable thresholds."
          exit 1
        fi
        
        echo "‚úÖ Evaluation pipeline passed - No regression detected!"

    - name: Upload evaluation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: evaluation-results
        path: |
          evaluation/ci_results.json
          evaluation/results_*.json

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const results = JSON.parse(fs.readFileSync('evaluation/ci_results.json', 'utf8'));
            const metrics = results.metrics;
            
            const comment = `
            ## üîç Evaluation Results
            
            | Metric | Score | Status |
            |--------|-------|--------|
            | Overall Score | ${metrics.overall_score?.toFixed(3) || 'N/A'} | ${metrics.overall_score >= 0.70 ? '‚úÖ' : '‚ùå'} |
            | Faithfulness | ${metrics.avg_faithfulness?.toFixed(3) || 'N/A'} | ${metrics.avg_faithfulness >= 0.75 ? '‚úÖ' : '‚ùå'} |
            | Answer Correctness | ${metrics.avg_answer_correctness?.toFixed(3) || 'N/A'} | ${metrics.avg_answer_correctness >= 0.65 ? '‚úÖ' : '‚ùå'} |
            | Success Rate | ${metrics.success_rate?.toFixed(3) || 'N/A'} | ${metrics.success_rate >= 0.90 ? '‚úÖ' : '‚ùå'} |
            
            **Total Queries:** ${metrics.total_queries || 'N/A'}
            **Avg Latency:** ${metrics.avg_latency_ms?.toFixed(0) || 'N/A'}ms
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read evaluation results:', error);
          }

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: [evaluation-pipeline, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/research-agent:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/research-agent:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Zde by bylo vol√°n√≠ deployment scriptu
        echo "Deployment completed!"

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests..."
        # Post-deployment validace
        echo "Smoke tests passed!"

  notify-slack:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#research-agent-ci'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
