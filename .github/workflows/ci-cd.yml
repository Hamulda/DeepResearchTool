name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ========================================
  # KROK 1: Code Quality & Linting
  # ========================================
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Linting

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy
        pip install -r requirements.txt

    - name: Run Ruff linter
      run: |
        ruff check src/ tests/ --output-format=github

    - name: Run Black formatter check
      run: |
        black --check --diff src/ tests/

    - name: Run MyPy type checking
      run: |
        mypy src/ --ignore-missing-imports --show-error-codes

    - name: Check import sorting
      run: |
        pip install isort
        isort --check-only --diff src/ tests/

  # ========================================
  # KROK 2: Security Scanning
  # ========================================
  security:
    runs-on: ubuntu-latest
    name: Security Scanning

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f txt

    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ========================================
  # KROK 3: Unit Tests
  # ========================================
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        cp .env.template .env
        echo "AI_OPENAI_API_KEY=test-key" >> .env
        echo "SECURITY_SECRET_KEY=test-secret-key" >> .env
        echo "SECURITY_JWT_SECRET=test-jwt-secret" >> .env
        echo "DB_POSTGRES_PASSWORD=test-password" >> .env

    - name: Run unit tests with coverage
      run: |
        pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-branch \
          --cov-fail-under=80 \
          -v \
          --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.11'
      with:
        name: coverage-report
        path: htmlcov/

  # ========================================
  # KROK 4: Integration Tests
  # ========================================
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [unit-tests]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test-password
          POSTGRES_USER: deepresearch
          POSTGRES_DB: deepresearch
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up integration test environment
      run: |
        cp .env.template .env
        echo "ENVIRONMENT=testing" >> .env
        echo "DB_REDIS_HOST=localhost" >> .env
        echo "DB_POSTGRES_HOST=localhost" >> .env
        echo "DB_POSTGRES_PASSWORD=test-password" >> .env
        echo "AI_OPENAI_API_KEY=test-key" >> .env
        echo "SECURITY_SECRET_KEY=test-secret-key" >> .env
        echo "SECURITY_JWT_SECRET=test-jwt-secret" >> .env

    - name: Wait for services
      run: |
        sleep 10

    - name: Run integration tests
      run: |
        pytest tests/test_integration_complete.py \
          -v \
          --tb=short \
          -m "not slow and not external" \
          --maxfail=5

    - name: Run phase integration tests
      run: |
        pytest tests/test_phase*_integration.py \
          -v \
          --tb=short \
          --maxfail=3

  # ========================================
  # KROK 5: Performance Tests
  # ========================================
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        pytest tests/ \
          -v \
          -m "slow" \
          --benchmark-only \
          --benchmark-json=benchmark.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  # ========================================
  # KROK 6: Build & Deploy (Production)
  # ========================================
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy
    needs: [code-quality, security, unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/deepresearchtool:latest
          ${{ secrets.CONTAINER_REGISTRY }}/deepresearchtool:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging
      if: success()
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here

  # ========================================
  # KROK 7: Notification & Reporting
  # ========================================
  notification:
    runs-on: ubuntu-latest
    name: Notification
    needs: [code-quality, security, unit-tests, integration-tests]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.code-quality.result == 'success' && needs.security.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"

    - name: Notify on failure
      if: ${{ needs.code-quality.result == 'failure' || needs.security.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' }}
      run: |
        echo "❌ Some CI checks failed!"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        exit 1
