# Production Docker Compose for DeepResearchTool
# Complete stack with monitoring, security, and scalability

version: '3.8'

services:
  # Main application
  deepresearch-api:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_VERSION: "1.0.0"
        BUILD_DATE: ${BUILD_DATE:-2025-08-27}
        BUILD_COMMIT: ${BUILD_COMMIT:-latest}
    container_name: deepresearch-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PRODUCTION=true
      - LOG_LEVEL=INFO
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://deepresearch:${DB_PASSWORD:-changeme}@postgres:5432/deepresearch
      - DEEPRESEARCH_MASTER_KEY=${MASTER_KEY:-changeme}
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
    volumes:
      - research_data:/app/data
      - research_cache:/app/research_cache
      - app_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - deepresearch-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.deepresearch.rule=Host(`api.deepresearch.local`)"
      - "traefik.http.services.deepresearch.loadbalancer.server.port=8000"

  # Vector database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: deepresearch-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - deepresearch-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: deepresearch-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=deepresearch
      - POSTGRES_USER=deepresearch
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - deepresearch-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: deepresearch-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - deepresearch-network

  # Ollama for local LLM inference
  ollama:
    image: ollama/ollama:latest
    container_name: deepresearch-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - deepresearch-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: deepresearch-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - deepresearch-api
    networks:
      - deepresearch-network

  # Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: deepresearch-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - deepresearch-network

  # Monitoring: Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: deepresearch-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - deepresearch-network

  # Log aggregation: Loki
  loki:
    image: grafana/loki:latest
    container_name: deepresearch-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - deepresearch-network

  # Log shipper: Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: deepresearch-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - deepresearch-network

  # Security: Fail2ban
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: deepresearch-fail2ban
    restart: unless-stopped
    environment:
      - TZ=UTC
      - F2B_LOG_LEVEL=INFO
    volumes:
      - fail2ban_data:/data
      - nginx_logs:/var/log/nginx:ro
      - ./security/fail2ban:/etc/fail2ban:ro
    cap_add:
      - NET_ADMIN
      - NET_RAW
    network_mode: host
    depends_on:
      - nginx

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: deepresearch-backup
    restart: "no"
    environment:
      - PGPASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - backup_data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"
    depends_on:
      - postgres
    networks:
      - deepresearch-network

# Networks
networks:
  deepresearch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  research_data:
    driver: local
  research_cache:
    driver: local
  app_logs:
    driver: local
  qdrant_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  fail2ban_data:
    driver: local
  backup_data:
    driver: local
