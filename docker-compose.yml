version: '3.8'

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: deep_research_neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - ./data/neo4j_data:/data
      - ./data/neo4j_logs:/logs
      - ./data/neo4j_import:/var/lib/neo4j/import
      - ./data/neo4j_plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/research2024
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_logs_debug_level=INFO
    restart: unless-stopped
    networks:
      - research_network

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: deep_research_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./data/qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    networks:
      - research_network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: deep_research_redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - research_network

  # ArchiveBox for local archiving
  archivebox:
    image: archivebox/archivebox:latest
    container_name: deep_research_archivebox
    ports:
      - "8001:8000"
    volumes:
      - ./data/archivebox:/data
    environment:
      - ALLOWED_HOSTS=*
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=research2024
      - CHROME_BINARY=google-chrome
      - USE_COLOR=True
      - SHOW_PROGRESS=True
      - SAVE_ARCHIVE_DOT_ORG=True
      - SAVE_WGET=True
      - SAVE_WARC=True
      - SAVE_PDF=True
      - SAVE_SCREENSHOT=True
      - SAVE_DOM=True
      - SAVE_SINGLEFILE=True
      - RESOLUTION=1440,2000
      - CHECK_SSL_VALIDITY=False
    restart: unless-stopped
    networks:
      - research_network

  # Ollama for local LLM inference
  ollama:
    image: ollama/ollama:latest
    container_name: deep_research_ollama
    ports:
      - "11434:11434"
    volumes:
      - ./data/ollama:/root/.ollama
      - /dev/shm:/dev/shm
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    restart: unless-stopped
    networks:
      - research_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    # For M1 Macs, remove the deploy section above

  # Deep Research Tool API
  research_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: deep_research_api
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
      - ./evaluation_results:/app/evaluation_results
    environment:
      - PYTHONPATH=/app
      - QDRANT_HOST=qdrant
      - REDIS_HOST=redis
      - OLLAMA_HOST=ollama
      - ARCHIVEBOX_HOST=archivebox
      # Knowledge Graph environment variables (PHASE 1)
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=research2024
      - NEO4J_HOST=neo4j
    depends_on:
      - neo4j
      - qdrant
      - redis
      - ollama
      - archivebox
    restart: unless-stopped
    networks:
      - research_network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: deep_research_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - research_network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: deep_research_grafana
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=research2024
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - research_network
    profiles:
      - monitoring

networks:
  research_network:
    driver: bridge

volumes:
  qdrant_storage:
  redis_data:
  archivebox_data:
  ollama_data:
  prometheus_data:
  grafana_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
